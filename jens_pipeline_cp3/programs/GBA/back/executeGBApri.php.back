<html>
<head>
<link type="text/css" rel="stylesheet" href="style.css">
</head>
<body>
<?php
	
	set_time_limit(0);
	//Get the time from the epoch
	$reqTime = $_SERVER['REQUEST_TIME'];
	// So $resultFile stores the name of the file that will contans the result. 
	
	//Variables
	$storeDir = 'filestore/';
	$swissDir = 'swissprotLearnedMatrices/wForgetRate/normalized/';

	if('text' == $_REQUEST['inputMode'])
	{
		$sequence =$_REQUEST['sequence'];
		
		//So $trimmedseq contains the formatted string
		// Now save this in a file
		//The name should be consistent: destFile
		$destFile = $storeDir.'destFile.txt';
		//open the File
		@$fp = fopen($destFile, 'w');
		//Handling error message
		if(!$fp)
		{
			echo '<p><strong> Your request cann\'t be processed at this time.<br />
			Please try again later.</p>';
		}
		//Write $sequence into the file
		fwrite($fp, $sequence, strlen($sequence));
		//Close it
		fclose($fp);
	}
	else if('file' == $_REQUEST['inputMode'])
	{
		if($_FILES['datafile']['error'])
		{
			echo 'Problem: ';
			switch($_FILES['datafile']['error'])
			{
				case 1: echo 'File exceeded upload_max_filesize'; break;
				case 2: echo 'File exceeded max_file_size'; break;
				case 3: echo 'File only partially uploaded'; break;
				case 4: echo 'No file uploaded'; break;
			}
			exit;
		}
		//Does the file have right MIME type?
		
		if($_FILES['datafile']['type'] != 'text/plain')
		{
			echo "Error type: ".$_FILES['datafile']['error'];
			echo 'Problem: file is not plain text';
			exit;
		}
		

		$destFile = $storeDir.$_FILES['datafile']['name'];
		if(is_uploaded_file($_FILES['datafile']['tmp_name']))
		{
			if(!move_uploaded_file($_FILES['datafile']['tmp_name'], $destFile))
			{
				echo 'Problem: could not move file to the destination directory';
				exit;
			}
			
		}
		else
		{
			echo 'Problem: Possible file upload attack. Filename: ';
			echo $_FILES['datafile']['name'];
			exit;
		}

		//File uploaded successfully
		//echo 'File uploaded successfully';
	}
	if( false == ($totalseq=file_get_contents($destFile)))
		echo "Could not read file.";
	//Now search the substring
	$count = substr_count($totalseq, ">");
	echo 'Count: '.$count;
	//Get the other variables
	$swiss =$_REQUEST['swiss'];
	$t1 = $_REQUEST['t1'];
	$t2 = $_REQUEST['t2'];
	$t3 = $_REQUEST['t3'];
	$eaddr = $_REQUEST['eaddr'];
	//Swissprot

	$swissProt = $swissDir.$swiss;
	
	//create the partpath
	
	$tenpath = $_SERVER['PHP_SELF'];
	$pathpieces = explode('/', $tenpath);
	$partpath="";
	for($iter=1; $iter < sizeof($pathpieces) -2; $iter=$iter+1)
	{
		$partpath=$partpath."/".$pathpieces[$iter];
	}
	$server=$_SERVER['SERVER_NAME'];
	$totalpath = 'http://'.$server.$partpath.'/resultDir/';
	if(!strcmp($eaddr, ""))
	    $emailflag = false;
	else
	    $emailflag = true;
	if($emailflag == true)
	{
		//Now save five variables in a files.
		//Open the arguement fiile
		$argstr=$destFile." ".$swissProt." ".$t1." ".$t2." ".$t3." ".$eaddr." ".$totalpath;
		$commandstr="php executeGBAsec.php ".$argstr." 2>&1 > /dev/null &";
	
		@$fscript = fopen("script", "w");
		if(!$fscript)
		{
			echo '<p><strong> Your request cann\'t be processed at this time.<br />
			Please try again later.</p>';
		}
		fwrite($fscript, $commandstr, strlen($commandstr));
		fclose($fscript);
		exec("sh script 2>&1 >/dev/null &");
		//echo $commandstr;
		echo "<br />";
		//exec ($commandstr);
		echo '<h2 align="center">Your query is being processed. A link to the result will be mailed to your email address.</h2>';
		//We have to save all the variable names in a file in order and have to 
		//recover them in some other format
	}
	else
	{
		//copy content from the other file
		//Get the time from the epoch
		//$reqTime = $_SERVER['REQUEST_TIME'];
		// So $resultFile stores the name of the file that will contans the result. 
		//$resultFile = '../resultDir/'.$reqTime.'.htm';
	
		//$filelink = $totalpath.$reqTime.'.htm';
		//Now $totalpath con contains the mail address
		//echo "result link: ".$totalpath;
		//Open the file and store the file pointer in a handle
		//@$resfp = fopen($resultFile, 'w');
		//Handling error message
		//if(!$resfp)
		//{
		//	echo '<p><strong> Your request cann\'t be processed at this time.<br />
		//	Please try again later.</p>';
		//}
		//echo 'Your query is being processed. A link to the result will be mailed to your email address.';
		//echo 'The name of the outfile is :'.$resultFile;
		
		/*
		fwrite($resfp, '<html>'."\n");
		fwrite($resfp, '<head>',"\n");
		fwrite($resfp, '<link type="text/css" rel="stylesheet" href="../lcr/style.css">'."\n");
		fwrite($resfp, '</head>'."\n");
		fwrite($resfp, '<body>'."\n");
		*/
	
		//So From Here actual execution starts. So we are splitting it here.
		//Now create the excution Line
		echo"<h1 align=\"center\"> Graph Based Algorithm </h1><hr />";
		//fwrite($resfp, '<h1 align=\"center\"> Graph Based Algorithm </h1><hr />'."\n");
	

		$execLine1 = "java applications.Gbm ".$destFile." ".$swissProt." ".$t2." ".$t1." ".$t3." knowledge/blosum62Matrix 1";
	
		//echo 'execLine1: '.$execLine1."\n";
		$outline1 = shell_exec($execLine1);
	
		$outline1=trim($outline1);
	
		$outarr1 = str_split($outline1);
		/*
		fwrite($resfp,  '<h2>Low complexity regions masked by \'x\': </h2>'."\n");
		fwrite($resfp,  '<table class="ex" cellspacing="0" border="1" width=500 cellpadding="3" font-family: courier>'."\n"); 
		fwrite($resfp,  ' <tr>'."\n");
		fwrite($resfp,  '    <td valign="top">'."\n");
		*/
		echo '<h2>Low complexity regions masked by \'x\': </h2>';
		echo '<table class="ex" cellspacing="0" border="1" width=500 cellpadding="3" font-family: courier>'; 
		echo ' <tr>';
		echo '    <td valign="top">';
		
		$desflag = false;
		for($i=0; $i < sizeof($outarr1); $i++)
		{
			$j=1;
			$ss = substr($outline1, $i, $j);
			if(!strcmp($ss, "\n"))
			{
				$desflag = false;
			
				echo '<br />';
				//fwrite($resfp,  '<br />'."\n");
			}
			else
			{
				if($outarr1[$i] == '>')
				{
					$desflag = true;
				}
				if($outarr1[$i] == '>' && $i !=0)
				{
					echo '<br />';
					//fwrite($resfp,  '<br />'."\n");
				}
				if($desflag == true)
				{
					echo '<i>'.$outarr1[$i].'</i>';
					//fwrite($resfp,  '<i>'.$outarr1[$i].'</i>');
				}
				else
				{
					if($outarr1[$i] == 'x')
					{
						echo 'X';
						//fwrite($resfp,  'X');
					}
					else
					{
						echo $outarr1[$i];
						//fwrite($resfp,  $outarr1[$i]);
					}
				}
			}
		}
	
		echo '</td>';
		echo  '</tr>';
		echo '</table>';	//Here compare the characters between $outarr and $trimmed.
		//fwrite($resfp,  '</td>'."\n");
		//fwrite($resfp,  '</tr>'."\n");
		//fwrite($resfp,  '</table>'."\n");
	

		//Doing the range in different way
		echo '<h2>Range of low complexity region:</h2>';
		echo '<table class="ex" cellspacing="0" border="1" width=500 cellpadding="3" font-family: courier>'; 
		echo ' <tr>';
		echo '    <td valign="top">';
	
		/*
		fwrite($resfp,  '<h2>Range of low complexity region:</h2>'."\n");
		fwrite($resfp,  '<table class="ex" cellspacing="0" border="1" width=500 cellpadding="3" font-family: courier>'."\n");
		fwrite($resfp,  ' </tr>'."\n");
		fwrite($resfp,  '    <td valign="top">'."\n");
		*/
		$desflag = false;
		for($i=0; $i < sizeof($outarr1); $i++)
		{
			$j=1;
			$ss = substr($outline1, $i, $j);
			if(!strcmp($ss, "\n"))
			{
				$desflag = false;
				$ss2 = substr($outline1, $i+1, $j);
				if(!strcmp($ss2,"\n"))
				{
					echo '<br />';
					//fwrite($resfp,  '<br />'."\n");
				}
				if(true == $incomment)
				{
					echo '<br />';
					//fwrite($resfp,  '<br />'."\n");
					$incomment=false;
					$pos=0;
				}
			}
			else
			{
				if($outarr1[$i] == '>')
				{
					$incomment = true;
					$desflag = true;
				}
				if($outarr1[$i] == '>' && $i !=0)
				{
					echo '<br />';
					echo '<br />';
					//fwrite($resfp,  '<br />'."\n");
					//fwrite($resfp,  '<br />'."\n");
				}
				if($desflag == true)
				{
					echo '<i>'.$outarr1[$i].'</i>';
					//fwrite($resfp,  '<i>'.$outarr1[$i].'</i>');
				}			
				else
				{
					$pos = $pos+1;
					if($outarr1[$i] == 'x')
					{
						//echo 'X';
						if(false ==$inmask)
						{
					
							echo $pos;
							echo '-';
							//fwrite($resfp,  $pos);
							//fwrite($resfp,  '-');
							$inmask=true;
						}
						if(true == $inmask)
						{	
							if('x' != $outarr1[$i+1])
							{
								$ss1 = substr($outline1, $i+1, $j);
								if(strcmp($ss1, "\n"))
								{
									echo $pos;
									echo ' ';
									//fwrite($resfp,  $pos);
									//fwrite($resfp,  ' ');
									$inmask=false;
								}
							}
						}
					}
					else
					{
						//echo $outarr1[$i];
					}
				}
			}
		}
	
		echo '</td>';
		echo  '</tr>';
		echo '</table>';
		//fwrite($resfp,  '</td>'."\n");
		//fwrite($resfp,  '</tr>'."\n");
		//fwrite($resfp,  '</table>'."\n");
	
		//Here compare the characters between $outarr and $trimmed.
		//End: Doing the range in different way
	
		if( false == ($sequence=file_get_contents($destFile)))
			echo "Could not read file.";
		
		// Just format the sequence so that there is no extra '\n' in the $sequence
		$pieces = explode("\n", $sequence);
		$i=0;
		while($i < sizeof($pieces))
		{
			$pieces[$i]= trim($pieces[$i]);
			if(!strcmp($pieces[$i], ""))
			{
				//Do nothing
			}
			else
			{
				//concatenate the strings
				$trimmedseq .="\n";
				$trimmedseq .=$pieces[$i];
			}
			$i++;
		}
	
		$trimmedseq = trim($trimmedseq);
		//Now the job is to compare $outline and $trimmedseq and work accordingly
		$outarr = str_split($outline1);
		$trimmed = str_split($trimmedseq);
	
		echo '<h2>Highlighted low complexity regions:</h2>';
		echo '<table class="ex" cellspacing="0" border="1" width=500 cellpadding="3" background-color=#D1D1D1>'; 
		echo ' <tr>';
		echo '    <td valign="top">';
	
		//fwrite($resfp,  '<h2>Highlighted low complexity regions:</h2>'."\n");
		//fwrite($resfp,  '<table class="ex" cellspacing="0" border="1" width=500 cellpadding="3" background-color=#D1D1D1>'."\n");
		//fwrite($resfp,  ' <tr>'."\n");
		//fwrite($resfp,  '    <td valign="top">'."\n");
	
		$desflag = false;
		for($i=0; $i < sizeof($trimmed); $i++)
		{
			$j=1;
			$ss = substr($trimmedseq, $i, $j);
			if(!strcmp($ss, "\n"))
			{
				$desflag = false;
				echo '<br />';
				//fwrite($resfp,  '<br />'."\n");
			}
			else if($outarr[$i] == $trimmed[$i])
			{
				if($outarr[$i] == '>')
					$desflag = true;
				if($outarr[$i] == '>' && $i !=0)
				{
					echo '<br />';
					//fwrite($resfp,  '<br />'."\n");
				}
				if($desflag == true)
				{
					echo '<i>'.$trimmed[$i].'</i>';
					//fwrite($resfp,  '<i>'.$trimmed[$i].'</i>');
				}
				else
				{
					echo $trimmed[$i];
					//fwrite($resfp,  $trimmed[$i]);
				}
			}
			else
			{
				echo "<u>".$trimmed[$i]."</u>";
				//fwrite($resfp,  "<u>".$trimmed[$i]."</u>");
			}
		}
	
		echo '</td>';
		echo  '</tr>';
		echo '</table>';	//Here compare the characters between $outarr and $trimmed.
		//fwrite($resfp,  '</td>'."\n");
		//fwrite($resfp,  '</tr>'."\n");
		//fwrite($resfp,  '</table>'."\n");
		//fwrite($resfp, '</body>'."\n");
		//fwrite($resfp, '</html>'."\n");
		//fclose($resfp);

	}
		
		
?>
</body>
</html>




